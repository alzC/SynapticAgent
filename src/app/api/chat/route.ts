import { NextRequest } from 'next/server';
import { runAgentWorkflow } from '@/lib/supervisor';
import { checkQuota, recordUsage } from '@/lib/db/quotas';
import { auth } from '../../../../auth';

// Retir√© Edge Runtime pour compatibilit√© avec postgres
// export const runtime = 'edge';

export async function POST(req: NextRequest) {
  try {
    const { message, forcedAgent } = await req.json();
    
    // R√©cup√©rer l'utilisateur authentifi√©
    const session = await auth();
    if (!session?.user?.id) {
      return new Response(JSON.stringify({ 
        error: 'Non authentifi√©',
        reason: 'Veuillez vous connecter pour utiliser SynapticAgent'
      }), {
        status: 401,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const userId = session.user.id;
    const modelId = 'meta-llama/llama-4-scout-17b-16e-instruct';

    // Log dans la console pour l'historique terminal
    console.log('üì© Message re√ßu:', message, 'User:', session.user.email);

    // V√©rifier les quotas AVANT l'appel API (async maintenant)
    const quotaCheck = await checkQuota(userId, modelId);
    if (!quotaCheck.ok) {
      console.log('üö´ Quota d√©pass√©:', quotaCheck.reason);
      return new Response(JSON.stringify({ 
        error: 'Quota d√©pass√©',
        reason: quotaCheck.reason,
        quotaExceeded: true
      }), {
        status: 429, // Too Many Requests
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // Ex√©cuter le workflow des agents (avec agent forc√© si sp√©cifi√©)
    const result = await runAgentWorkflow(message, forcedAgent);
    
    // Enregistrer l'usage APR√àS l'appel (estimation ~1000 tokens par appel)
    await recordUsage(
      userId, 
      modelId, 
      1000, // tokens estim√©s
      result.agentName, // agent utilis√©
      '/api/chat',
      true // succ√®s
    );

    // Log de la r√©ponse dans la console
    console.log('ü§ñ Agent:', result.agentName);
    if (result.toolUsed) {
      console.log('üõ† Tool utilis√©:', result.toolUsed);
    }
    console.log('üìÑ Result:', result);
    console.log('üí¨ R√©ponse:', result.response);

    /* Version optimis√©e pour r√©duire les tokens
    console.log(`ü§ñ ${result.agentName}${result.toolUsed ? ` > ${result.toolUsed}` : ''}`);
    */

    return new Response(JSON.stringify(result), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    /* Logs d√©taill√©s pour le d√©veloppement
    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    console.error('Context:', {
      timestamp: new Date().toISOString(),
      message,
      lastAgent: result?.agentName,
      lastTool: result?.toolUsed
    });
    */

    return new Response(
      JSON.stringify({ 
        error: 'Une erreur est survenue',
        details: error instanceof Error ? error.message : String(error)
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  }
}
